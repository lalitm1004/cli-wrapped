use chrono::{Datelike, Utc};

pub fn print_title() {
    let title = vec![
        "           ██████╗██╗     ██╗    ██╗    ██╗██████╗  █████╗ ██████╗ ██████╗ ███████╗██████╗ ",
        "          ██╔════╝██║     ██║    ██║    ██║██╔══██╗██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗",
        "          ██║     ██║     ██║    ██║ █╗ ██║██████╔╝███████║██████╔╝██████╔╝█████╗  ██║  ██║",
        "          ██║     ██║     ██║    ██║███╗██║██╔══██╗██╔══██║██╔═══╝ ██╔═══╝ ██╔══╝  ██║  ██║",
        "          ╚██████╗███████╗██║    ╚███╔███╔╝██║  ██║██║  ██║██║     ██║     ███████╗██████╔╝",
        "           ╚═════╝╚══════╝╚═╝     ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝     ╚═╝     ╚══════╝╚═════╝ ",
    ];

    for line in title {
        println!("{}", line);
    }
}

pub fn print_year() {
    let ascii_nums = num_string_to_ascii(Utc::now().year().to_string());
    for line in 0..6 {
        print!("                             ");
        for digit in 0..ascii_nums.len() {
            print!("  {}", ascii_nums[digit][line])
        }
        println!();
    }
}

fn num_string_to_ascii(num_string: String) -> Vec<Vec<&'static str>> {
    let numbers = [
        vec![
            " ██████╗ ",
            "██╔═████╗",
            "██║██╔██║",
            "████╔╝██║",
            "╚██████╔╝",
            " ╚═════╝ "
        ],
        vec![
            " ██╗",
            "███║",
            "╚██║",
            " ██║",
            " ██║",
            " ╚═╝"
        ],
        vec![
            "██████╗ ",
            "╚════██╗",
            " █████╔╝",
            "██╔═══╝ ",
            "███████╗",
            "╚══════╝"
        ],
        vec![
            "██████╗ ",
            "╚════██╗",
            " █████╔╝",
            " ╚═══██╗",
            "██████╔╝",
            "╚═════╝ "
        ],
        vec![
            "██╗  ██╗",
            "██║  ██║",
            "███████║",
            "╚════██║",
            "     ██║",
            "     ╚═╝"
        ],
        vec![
            "███████╗",
            "██╔════╝",
            "███████╗",
            "╚════██║",
            "███████║",
            "╚══════╝"
        ],
        vec![
            " ██████╗ ",
            "██╔════╝ ",
            "███████╗ ",
            "██╔═══██╗",
            "╚██████╔╝",
            " ╚═════╝ "
        ],
        vec![
            "███████╗",
            "╚════██║",
            "    ██╔╝",
            "   ██╔╝ ",
            "   ██║  ",
            "   ╚═╝  "
        ],
        vec![
            " █████╗ ",
            "██╔══██╗",
            "╚█████╔╝",
            "██╔══██╗",
            "╚█████╔╝",
            " ╚════╝ "
        ],
        vec![
            " █████╗ ",
            "██╔══██╗",
            "╚██████║",
            " ╚═══██║",
            " █████╔╝",
            " ╚════╝ "
        ],
    ];

    let digits: Vec<u32> = num_string
        .chars()
        .map(|c| c.to_digit(10).unwrap())
        .collect();

    let mut ascii_vec: Vec<Vec<&str>> = vec![];
    for &digit in &digits {
        ascii_vec.push(numbers[digit as usize].clone());
    }
    ascii_vec
}